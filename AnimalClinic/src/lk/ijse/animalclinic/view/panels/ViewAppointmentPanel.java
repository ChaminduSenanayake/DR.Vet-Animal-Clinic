/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.ijse.animalclinic.view.panels;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lk.ijse.animalclinic.controller.AppointmentController;
import static lk.ijse.animalclinic.controller.AppointmentController.appointmentDAO;
import lk.ijse.animalclinic.controller.OwnerController;
import lk.ijse.animalclinic.controller.PetController;
import lk.ijse.animalclinic.controller.VetController;
import lk.ijse.animalclinic.core.dto.AppointmentDTO;
import lk.ijse.animalclinic.core.dto.OwnerDTO;
import lk.ijse.animalclinic.core.dto.PetDTO;
import lk.ijse.animalclinic.core.dto.VetDTO;

/**
 *
 * @author chamindu
 */
public class ViewAppointmentPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewAppointmentPanel
     */
    public ViewAppointmentPanel() {
        initComponents();
        loadAppointment();
        loadAllAppIDs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        txtAppTime = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        txtOwnerID = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        txtPetName = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtVetFirstName = new org.jdesktop.swingx.JXTextField();
        txtVetLastName = new org.jdesktop.swingx.JXTextField();
        txtOwnerFirstName = new org.jdesktop.swingx.JXTextField();
        txtOwnerLastName = new org.jdesktop.swingx.JXTextField();
        cmbVetID = new org.jdesktop.swingx.JXComboBox();
        txtAppDate = new org.jdesktop.swingx.JXDatePicker();
        cmbAppID = new org.jdesktop.swingx.JXComboBox();
        cmbPetID = new org.jdesktop.swingx.JXComboBox();
        btnRemove = new javax.swing.JLabel();
        btnEdit = new javax.swing.JLabel();
        txtDateSearch = new org.jdesktop.swingx.JXDatePicker();
        jLabel60 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAppData = new org.jdesktop.swingx.JXTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel42.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel42.setText(" App.ID        -");
        jPanel1.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 110, 30));

        txtAppTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtAppTime.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(txtAppTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(875, 10, 260, 30));

        jLabel55.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel55.setText("Vet Name   -");
        jPanel1.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 60, 110, 30));

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel28.setText(" Vet.ID         -");
        jPanel1.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 110, 30));

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel29.setText("Time            -");
        jPanel1.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 10, 110, 30));

        jLabel59.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel59.setText("Date            -");
        jPanel1.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 110, 30));

        txtOwnerID.setEditable(false);
        txtOwnerID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtOwnerID.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(txtOwnerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 110, 222, 30));

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel27.setText(" Owner ID    -");
        jPanel1.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 110, 30));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("O.Name      -");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 110, 110, 30));

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel48.setText("pet Name    -");
        jPanel1.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 160, 110, 30));

        txtPetName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPetName.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(txtPetName, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 160, 240, 30));

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setText(" Pet ID         -");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 110, 30));

        txtVetFirstName.setEditable(false);
        txtVetFirstName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtVetFirstName.setPrompt("First Name");
        jPanel1.add(txtVetFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(478, 60, 242, 30));

        txtVetLastName.setEditable(false);
        txtVetLastName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtVetLastName.setPrompt("Last Name");
        jPanel1.add(txtVetLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 60, 385, 30));

        txtOwnerFirstName.setEditable(false);
        txtOwnerFirstName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtOwnerFirstName.setPrompt("First Name");
        jPanel1.add(txtOwnerFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(478, 110, 242, 30));

        txtOwnerLastName.setEditable(false);
        txtOwnerLastName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtOwnerLastName.setPrompt("Last Name");
        jPanel1.add(txtOwnerLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 110, 385, 30));

        cmbVetID.setBackground(new java.awt.Color(250, 255, 255));
        cmbVetID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbVetID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbVetIDItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbVetID, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 220, 30));

        txtAppDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(txtAppDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, 240, 30));

        cmbAppID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbAppID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAppIDItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbAppID, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 220, 30));

        cmbPetID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbPetID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPetIDItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbPetID, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 220, 30));

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 1270, 220));

        btnRemove.setBackground(new java.awt.Color(102, 102, 102));
        btnRemove.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(189, 103, 107));
        btnRemove.setText("  Remove");
        btnRemove.setOpaque(true);
        btnRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoveMouseClicked(evt);
            }
        });
        add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 670, 130, 50));

        btnEdit.setBackground(new java.awt.Color(102, 102, 102));
        btnEdit.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnEdit.setText("      Edit");
        btnEdit.setOpaque(true);
        btnEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditMouseClicked(evt);
            }
        });
        add(btnEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 670, 130, 50));

        txtDateSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateSearchActionPerformed(evt);
            }
        });
        add(txtDateSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 10, 260, 50));

        jLabel60.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel60.setText("Search Date");
        add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 20, 110, 30));

        tblAppData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment ID", "Owner Name", "Pet Name", "Veterinary Name", "Date", "Time"
            }
        ));
        tblAppData.setEditable(false);
        tblAppData.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        tblAppData.setRowHeight(25);
        tblAppData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAppDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAppData);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 1280, 310));
    }// </editor-fold>//GEN-END:initComponents

    private void cmbVetIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbVetIDItemStateChanged
        try {
            if (cmbVetID.getSelectedIndex() == -1) {
                return;
            }
            VetDTO vet = VetController.searchVetByID(cmbVetID.getSelectedItem().toString());
            if (vet == null) {
                return;
            }
            txtVetFirstName.setText(vet.getfName());
            txtVetLastName.setText(vet.getlName());

        } catch (Exception ex) {
            Logger.getLogger(VeterinaryPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbVetIDItemStateChanged

    private void txtDateSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateSearchActionPerformed
        loadAppointment();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        Date date = txtAppDate.getDate();
        if (date != null) {
            try {
                DefaultTableModel dtm = (DefaultTableModel) tblAppData.getModel();
                dtm.setRowCount(0);
                ArrayList<AppointmentDTO> appointment = AppointmentController.searchAppointmentByDate(df.format(date));
                if (appointment != null) {
                    for (AppointmentDTO app : appointment) {
                        OwnerDTO owner = OwnerController.searchOwnerByID(app.getOwnerID());
                        VetDTO vet = VetController.searchVetByID(app.getVetID());
                        PetDTO pet = PetController.searchPetByID(app.getPetID());
                        String OwnerName = owner.getFirstName() + " " + owner.getLastName();
                        String VetName = vet.getfName() + " " + vet.getlName();
                        Object[] rowData = {app.getAppID(), OwnerName, pet.getPetName(), VetName, app.getDate(), app.getTime()};
                        dtm.addRow(rowData);

                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(ViewAppointmentPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtDateSearchActionPerformed

    private void tblAppDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppDataMouseClicked
        try {
            if (tblAppData.getRowCount() == -1) {
                return;
            }
            String AID = (String) tblAppData.getValueAt(tblAppData.getSelectedRow(), 0);
            AppointmentDTO app = AppointmentController.searchAppointmentByID(AID);
            if (app == null) {
                return;
            }
            OwnerDTO owner = OwnerController.searchOwnerByID(app.getOwnerID());
            //loadAllAppIDs();
            cmbAppID.setSelectedItem(app.getAppID());
            txtAppDate.setDate(stringToDate(app.getDate()));
            txtAppTime.setText(app.getTime());
            txtOwnerID.setText(app.getOwnerID());
            txtOwnerFirstName.setText(owner.getFirstName());
            txtOwnerLastName.setText(owner.getLastName());
            loadAllVetIDs();
            cmbVetID.setSelectedItem(app.getVetID());
            loadPetIDs();
            cmbPetID.setSelectedItem(app.getPetID());
        } catch (Exception ex) {
            Logger.getLogger(ViewAppointmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_tblAppDataMouseClicked

    private void cmbPetIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPetIDItemStateChanged
        try {
            if (cmbPetID.getSelectedIndex() == -1) {
                return;
            }
            PetDTO pet = PetController.searchPetByID(cmbPetID.getSelectedItem().toString());
            if (pet == null) {
                return;
            }
            txtPetName.setText(pet.getPetName());
        } catch (Exception ex) {
            Logger.getLogger(ViewAppointmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbPetIDItemStateChanged

    private void btnEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditMouseClicked
        try {
            AppointmentDTO app = new AppointmentDTO(cmbAppID.getSelectedItem().toString(), txtOwnerID.getText(), cmbPetID.getSelectedItem().toString(), cmbVetID.getSelectedItem().toString(), dateToString(txtAppDate.getDate()), txtAppTime.getText());
            boolean result = AppointmentController.editAppointment(app);
            if (result) {
                JOptionPane.showMessageDialog(this, "Appointment has been successfully Edited.");
                loadAppointment();
            } else {
                JOptionPane.showMessageDialog(this, "Appointment hasn't been edited due to some error");
            }

        } catch (Exception ex) {
            Logger.getLogger(AddAppointmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnEditMouseClicked

    private void btnRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoveMouseClicked
        try {
            AppointmentDTO app = new AppointmentDTO(cmbAppID.getSelectedItem().toString(), txtOwnerID.getText(), cmbPetID.getSelectedItem().toString(), cmbVetID.getSelectedItem().toString(), dateToString(txtAppDate.getDate()), txtAppTime.getText());
            boolean result = AppointmentController.removeAppointment(app);
            if (result) {
                JOptionPane.showMessageDialog(this, "Appointment has been successfully Removed.");
                loadPetIDs();
                loadAppointment();
                loadAllAppIDs();
            } else {
                JOptionPane.showMessageDialog(this, "Appointment hasn't been Removed due to some error");
            }

        } catch (Exception ex) {
            Logger.getLogger(MedicinePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRemoveMouseClicked

    private void cmbAppIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAppIDItemStateChanged
        try {
            if (cmbAppID.getSelectedIndex() == -1) {
                return;
            }
            AppointmentDTO app = AppointmentController.searchAppointmentByID(cmbAppID.getSelectedItem().toString());
            OwnerDTO owner = OwnerController.searchOwnerByID(app.getOwnerID());
            txtOwnerID.setText(app.getOwnerID());
            txtOwnerFirstName.setText(owner.getFirstName());
            txtOwnerLastName.setText(owner.getLastName());
            loadAllVetIDs();
            cmbVetID.setSelectedItem(app.getVetID());
            loadPetIDs();
            cmbPetID.setSelectedItem(app.getPetID());
            txtAppDate.setDate(stringToDate(app.getDate()));
            txtAppTime.setText(app.getTime());
        } catch (ParseException ex) {
            Logger.getLogger(ViewAppointmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ViewAppointmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbAppIDItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnEdit;
    private javax.swing.JLabel btnRemove;
    private org.jdesktop.swingx.JXComboBox cmbAppID;
    private org.jdesktop.swingx.JXComboBox cmbPetID;
    private org.jdesktop.swingx.JXComboBox cmbVetID;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTable tblAppData;
    private org.jdesktop.swingx.JXDatePicker txtAppDate;
    private javax.swing.JTextField txtAppTime;
    private org.jdesktop.swingx.JXDatePicker txtDateSearch;
    private org.jdesktop.swingx.JXTextField txtOwnerFirstName;
    private javax.swing.JTextField txtOwnerID;
    private org.jdesktop.swingx.JXTextField txtOwnerLastName;
    private javax.swing.JTextField txtPetName;
    private org.jdesktop.swingx.JXTextField txtVetFirstName;
    private org.jdesktop.swingx.JXTextField txtVetLastName;
    // End of variables declaration//GEN-END:variables
  private void loadAppointment() {
        try {
            DefaultTableModel dtm = (DefaultTableModel) tblAppData.getModel();
            dtm.setRowCount(0);
            ArrayList<AppointmentDTO> appointment = AppointmentController.getAll();
            if (appointment == null) {
                return;
            }
            for (AppointmentDTO app : appointment) {
                OwnerDTO owner = OwnerController.searchOwnerByID(app.getOwnerID());
                VetDTO vet = VetController.searchVetByID(app.getVetID());
                PetDTO pet = PetController.searchPetByID(app.getPetID());
                String OwnerName = owner.getFirstName() + " " + owner.getLastName();
                String VetName = vet.getfName() + " " + vet.getlName();
                Object[] rowData = {app.getAppID(), OwnerName, pet.getPetName(), VetName, app.getDate(), app.getTime()};
                dtm.addRow(rowData);

            }
        } catch (Exception ex) {
            Logger.getLogger(ViewAppointmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadPetIDs() {
        try {
            ArrayList<PetDTO> allPets = PetController.getPets(txtOwnerID.getText());
            cmbPetID.removeAllItems();
            if (allPets == null) {
                return;
            }
            for (PetDTO pet : allPets) {
                cmbPetID.addItem(pet.getPetID());
            }
        } catch (Exception ex) {
            Logger.getLogger(ViewAppointmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadAllVetIDs() {
        try {
            ArrayList<VetDTO> allVet = VetController.getAllVets();
            cmbVetID.removeAllItems();
            if (allVet == null) {
                return;
            }
            for (VetDTO vet : allVet) {
                cmbVetID.addItem(vet.getVID());
            }
        } catch (Exception ex) {
            Logger.getLogger(VeterinaryPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void loadAllAppIDs() {
        try {
            ArrayList<AppointmentDTO> allApp = AppointmentController.getAll();
            cmbAppID.removeAllItems();
            if (allApp == null) {
                return;
            }
            for (AppointmentDTO app : allApp) {
                cmbAppID.addItem(app.getAppID());
            }
        } catch (Exception ex) {
            Logger.getLogger(VeterinaryPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private Date stringToDate(String date) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            return sdf.parse(date);
        } catch (ParseException ex) {
            Logger.getLogger(ViewAppointmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private String dateToString(Date date) {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        return df.format(date);
    }

}
