/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.ijse.animalclinic.view.panels;

import com.sun.org.apache.xerces.internal.impl.dtd.models.CMBinOp;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import lk.ijse.animalclinic.common.IDGenarator;
import lk.ijse.animalclinic.controller.MedicineController;
import lk.ijse.animalclinic.controller.OwnerController;
import lk.ijse.animalclinic.controller.PaymentController;
import lk.ijse.animalclinic.controller.PetController;
import lk.ijse.animalclinic.controller.TreatmentController;
import lk.ijse.animalclinic.controller.TreatmentDetailsController;
import lk.ijse.animalclinic.controller.VetController;
import lk.ijse.animalclinic.core.dto.MedicineDTO;
import lk.ijse.animalclinic.core.dto.OwnerDTO;
import lk.ijse.animalclinic.core.dto.PaymentDTO;
import lk.ijse.animalclinic.core.dto.PetDTO;
import lk.ijse.animalclinic.core.dto.TreatmentDTO;
import lk.ijse.animalclinic.core.dto.TreatmentDetailsDTO;
import lk.ijse.animalclinic.core.dto.VetDTO;
import lk.ijse.animalclinic.dao.custom.TreatmentDetailsDAO;
import lk.ijse.animalclinic.view.HomeFrame;

/**
 *
 * @author chamindu
 */
public class AddPetTreatmentPanel extends javax.swing.JPanel {

    DefaultTableModel dtmMedicine;
    DefaultTableModel dtmTreatment;

    /**
     * Creates new form PetTreatmentPanel
     */
    public AddPetTreatmentPanel() {
        initComponents();
        loadAllOwnerIDs();
        dtmMedicine = (DefaultTableModel) tblMedicine.getModel();
        dtmTreatment = (DefaultTableModel) tblTreatment.getModel();
        getPaymentID();
        getTreatmentID();
        loadSystemDate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        jLabel54 = new javax.swing.JLabel();
        txtTreatmentID = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        txtxDiagnosis = new javax.swing.JTextField();
        txtDesc = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblTreatment = new org.jdesktop.swingx.JXTable();
        jLabel68 = new javax.swing.JLabel();
        txtMedDesc = new javax.swing.JTextField();
        jLabel69 = new javax.swing.JLabel();
        txtMedPrice = new javax.swing.JTextField();
        cmbMedicineID = new org.jdesktop.swingx.JXComboBox();
        jLabel70 = new javax.swing.JLabel();
        txtMedQty = new javax.swing.JTextField();
        jLabel71 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtPaymentID = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        cmbOwnerID = new org.jdesktop.swingx.JXComboBox();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMedicine = new org.jdesktop.swingx.JXTable();
        cmbPetID = new org.jdesktop.swingx.JXComboBox();
        txtNIC = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        cmbVetID = new org.jdesktop.swingx.JXComboBox();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        txtTreatmentAmount = new javax.swing.JTextField();
        jLabel74 = new javax.swing.JLabel();
        txtMedCharge = new javax.swing.JTextField();
        txtFirstName = new org.jdesktop.swingx.JXTextField();
        jLabel58 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        cmbMedicineType = new org.jdesktop.swingx.JXComboBox();
        txtDate = new org.jdesktop.swingx.JXTextField();
        txtQtyOnHand = new javax.swing.JTextField();
        txtTreatmentCharge = new org.jdesktop.swingx.JXTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel54.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel54.setForeground(new java.awt.Color(204, 204, 204));
        jLabel54.setText("Add Treatment Details");
        jPanel9.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 320, 40));

        txtTreatmentID.setEditable(false);
        txtTreatmentID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTreatmentID.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel9.add(txtTreatmentID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 140, 200, 30));

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel55.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(204, 204, 204));
        jLabel55.setText("Add Treatment Details");
        jPanel10.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 320, 40));

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setText("Pet ID              -");
        jPanel10.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 90, 140, 30));

        jLabel57.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel57.setText("Date     -");
        jPanel10.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 30, 70, 30));

        jLabel63.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel63.setText("Treatment ID                -");
        jPanel10.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 170, 30));

        jLabel64.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel64.setText("Medicine ID   -");
        jPanel10.add(jLabel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 440, 100, 30));

        jLabel65.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel65.setText("Diagnosis                       -");
        jPanel10.add(jLabel65, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 170, 30));

        jLabel66.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel66.setText("Treatment Description -");
        jPanel10.add(jLabel66, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 190, 30));

        txtxDiagnosis.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtxDiagnosis.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtxDiagnosis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtxDiagnosisActionPerformed(evt);
            }
        });
        jPanel10.add(txtxDiagnosis, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, 640, 30));

        txtDesc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtDesc.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescActionPerformed(evt);
            }
        });
        jPanel10.add(txtDesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 240, 640, 30));

        jLabel13.setBackground(new java.awt.Color(102, 102, 102));
        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("  Make Payment");
        jLabel13.setOpaque(true);
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });
        jPanel10.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 670, 150, 50));

        jLabel67.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel67.setText("Veterinary ID       -");
        jPanel10.add(jLabel67, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 140, 140, 30));

        tblTreatment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TID", "Pet ID", "Vet ID", "Daignosis", "Description", "Treatment charge"
            }
        ));
        tblTreatment.setEditable(false);
        tblTreatment.setHorizontalScrollEnabled(true);
        jScrollPane3.setViewportView(tblTreatment);
        if (tblTreatment.getColumnModel().getColumnCount() > 0) {
            tblTreatment.getColumnModel().getColumn(3).setPreferredWidth(350);
            tblTreatment.getColumnModel().getColumn(4).setPreferredWidth(400);
            tblTreatment.getColumnModel().getColumn(5).setPreferredWidth(100);
        }

        jPanel10.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 280, 1280, 110));

        jLabel68.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel68.setText("Medicine Desc. -");
        jPanel10.add(jLabel68, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 480, 110, 30));

        txtMedDesc.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMedDesc.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtMedDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedDescActionPerformed(evt);
            }
        });
        jPanel10.add(txtMedDesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 480, 410, 30));

        jLabel69.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel69.setText("Medicine Price -");
        jPanel10.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 480, 110, 30));

        txtMedPrice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMedPrice.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtMedPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedPriceActionPerformed(evt);
            }
        });
        jPanel10.add(txtMedPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 480, 160, 30));

        cmbMedicineID.setBackground(new java.awt.Color(250, 255, 255));
        cmbMedicineID.setBorder(null);
        cmbMedicineID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbMedicineID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMedicineIDItemStateChanged(evt);
            }
        });
        cmbMedicineID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMedicineIDActionPerformed(evt);
            }
        });
        jPanel10.add(cmbMedicineID, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 440, 160, 30));

        jLabel70.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel70.setText("QtyOnHand -");
        jPanel10.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 480, 110, 30));

        txtMedQty.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMedQty.setToolTipText("Press Enter for Add to the table");
        txtMedQty.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtMedQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMedQtyActionPerformed(evt);
            }
        });
        jPanel10.add(txtMedQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 480, 70, 30));

        jLabel71.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel71.setText("Medicine Qty    -");
        jPanel10.add(jLabel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 480, 120, 30));

        jLabel14.setBackground(new java.awt.Color(102, 102, 102));
        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("   Save Treatment");
        jLabel14.setOpaque(true);
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });
        jPanel10.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 670, 170, 50));

        txtPaymentID.setEditable(false);
        txtPaymentID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPaymentID.setForeground(new java.awt.Color(29, 120, 156));
        txtPaymentID.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(0, 153, 204), new java.awt.Color(0, 153, 204)));
        jPanel10.add(txtPaymentID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 200, 30));

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(29, 120, 156));
        jLabel18.setText("Payment ID  -");
        jPanel10.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 170, 30));

        cmbOwnerID.setBackground(new java.awt.Color(250, 255, 255));
        cmbOwnerID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbOwnerID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbOwnerIDItemStateChanged(evt);
            }
        });
        jPanel10.add(cmbOwnerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 200, 30));

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel30.setText("Owner ID                       -");
        jPanel10.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 170, 30));

        tblMedicine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine ID", "Medicine desc.", "unit price", "Qty", "Amount"
            }
        ));
        jScrollPane2.setViewportView(tblMedicine);
        if (tblMedicine.getColumnModel().getColumnCount() > 0) {
            tblMedicine.getColumnModel().getColumn(1).setPreferredWidth(500);
            tblMedicine.getColumnModel().getColumn(4).setPreferredWidth(40);
        }

        jPanel10.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 520, 1280, 100));

        cmbPetID.setBackground(new java.awt.Color(250, 255, 255));
        cmbPetID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbPetID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPetIDItemStateChanged(evt);
            }
        });
        jPanel10.add(cmbPetID, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 90, 250, 30));

        txtNIC.setEditable(false);
        txtNIC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtNIC.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtNIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNICActionPerformed(evt);
            }
        });
        jPanel10.add(txtNIC, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 90, 230, 30));

        jLabel56.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel56.setText("NIC                        -");
        jPanel10.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 90, 140, 30));

        cmbVetID.setBackground(new java.awt.Color(250, 255, 255));
        cmbVetID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbVetID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbVetIDItemStateChanged(evt);
            }
        });
        cmbVetID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbVetIDActionPerformed(evt);
            }
        });
        jPanel10.add(cmbVetID, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 140, 230, 30));

        jLabel72.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel72.setForeground(new java.awt.Color(29, 120, 156));
        jLabel72.setText("Treatment Charge  -");
        jPanel10.add(jLabel72, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 220, 150, 30));

        jLabel73.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel73.setForeground(new java.awt.Color(0, 153, 153));
        jLabel73.setText("Amount  -");
        jPanel10.add(jLabel73, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 390, 80, 30));

        txtTreatmentAmount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTreatmentAmount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153), 2));
        jPanel10.add(txtTreatmentAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 390, 140, 30));

        jLabel74.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel74.setForeground(new java.awt.Color(0, 153, 153));
        jLabel74.setText("Amount  -");
        jPanel10.add(jLabel74, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 620, 80, 30));

        txtMedCharge.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMedCharge.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153), 2));
        jPanel10.add(txtMedCharge, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 620, 140, 30));

        txtFirstName.setEditable(false);
        txtFirstName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtFirstName.setPrompt("");
        jPanel10.add(txtFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 140, 250, 30));

        jLabel58.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel58.setText("Veterinary Name   -");
        jPanel10.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 140, 150, 30));

        jLabel75.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel75.setText("Medicine Type-");
        jPanel10.add(jLabel75, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 440, 110, 30));

        cmbMedicineType.setBackground(new java.awt.Color(250, 255, 255));
        cmbMedicineType.setBorder(null);
        cmbMedicineType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Injection", "Lotion", "Tablet", "Other" }));
        cmbMedicineType.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbMedicineType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMedicineTypeItemStateChanged(evt);
            }
        });
        cmbMedicineType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMedicineTypeActionPerformed(evt);
            }
        });
        jPanel10.add(cmbMedicineType, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 440, 410, 30));

        txtDate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtDate.setPrompt("");
        jPanel10.add(txtDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 30, 250, 30));

        txtQtyOnHand.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtQtyOnHand.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel10.add(txtQtyOnHand, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 480, 110, 30));

        txtTreatmentCharge.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTreatmentCharge.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtTreatmentCharge.setPrompt("LKR");
        txtTreatmentCharge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTreatmentChargeActionPerformed(evt);
            }
        });
        jPanel10.add(txtTreatmentCharge, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 210, 250, 50));

        jPanel9.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));
    }// </editor-fold>//GEN-END:initComponents

    private void txtMedDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedDescActionPerformed

    }//GEN-LAST:event_txtMedDescActionPerformed

    private void txtMedPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedPriceActionPerformed
        txtMedQty.requestFocus();
    }//GEN-LAST:event_txtMedPriceActionPerformed

    private void cmbOwnerIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbOwnerIDItemStateChanged
        try {
            if (cmbOwnerID.getSelectedIndex() == -1) {
                return;
            }
            OwnerDTO owner = OwnerController.searchOwnerByID(cmbOwnerID.getSelectedItem().toString());
            if (owner == null) {
                return;
            }
            txtNIC.setText(owner.getNIC());
            loadPetIDs();
            loadAllVetIDs();
            cmbPetID.requestFocus();
        } catch (Exception ex) {
            Logger.getLogger(AddAppointmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_cmbOwnerIDItemStateChanged

    private void cmbPetIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPetIDItemStateChanged
        cmbVetID.requestFocus();
    }//GEN-LAST:event_cmbPetIDItemStateChanged

    private void txtNICActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNICActionPerformed
        /*txtPetName.setText(null);
        txtPetBreed.setText(null);
        txtPetWeight.setValue(0);
        txtPetDesc.setText(null);
        txtPetDOB.setDate(null);*/
        try {
            OwnerDTO owner = OwnerController.searchOwnerByNIC(txtNIC.getText());
            if (owner == null) {
                return;
            }
            cmbOwnerID.setSelectedItem(owner.getOID());
            loadPetIDs();
        } catch (Exception ex) {
            Logger.getLogger(AddAppointmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtNICActionPerformed

    private void cmbVetIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbVetIDItemStateChanged
        try {
            if (cmbVetID.getSelectedIndex() == -1) {
                return;
            }
            VetDTO vet = VetController.searchVetByID(cmbVetID.getSelectedItem().toString());
            if (vet == null) {
                return;
            }
            txtFirstName.setText(vet.getfName());
            txtxDiagnosis.requestFocus();
        } catch (Exception ex) {
            Logger.getLogger(VeterinaryPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbVetIDItemStateChanged

    private void txtxDiagnosisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtxDiagnosisActionPerformed
        txtDesc.requestFocus();
    }//GEN-LAST:event_txtxDiagnosisActionPerformed

    private void txtDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescActionPerformed
        txtTreatmentCharge.requestFocus();
    }//GEN-LAST:event_txtDescActionPerformed

    private void cmbMedicineIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMedicineIDItemStateChanged
        try {
            if (cmbMedicineID.getSelectedIndex() == -1) {
                return;
            }
            MedicineDTO medicine = MedicineController.searchMedicineByID(cmbMedicineID.getSelectedItem().toString());
            if (medicine == null) {
                return;
            }
            txtMedDesc.setText(medicine.getDescription());
            txtMedPrice.setText(Double.toString(medicine.getPrice()));
            txtQtyOnHand.setText(Integer.toString(medicine.getQtyOnHand()));
            txtMedPrice.selectAll();
            txtMedPrice.requestFocus();
        } catch (Exception ex) {
            Logger.getLogger(AddPetTreatmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbMedicineIDItemStateChanged

    private void cmbMedicineTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMedicineTypeItemStateChanged
        try {
            if (cmbMedicineType.getSelectedIndex() == -1) {
                return;
            }
            ArrayList<MedicineDTO> allMed = MedicineController.searchMedicineByType(cmbMedicineType.getSelectedItem().toString());
            cmbMedicineID.removeAllItems();
            if (allMed == null) {
                return;
            }
            for (MedicineDTO medicine : allMed) {
                cmbMedicineID.addItem(medicine.getMID());
            }
        } catch (Exception ex) {
            Logger.getLogger(AddPetTreatmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_cmbMedicineTypeItemStateChanged

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        if (txtxDiagnosis.getText().isEmpty() || txtDesc.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "please Enter Diagnosis and Treatment Description");
        } else {
            PaymentDTO payment = new PaymentDTO(txtPaymentID.getText(), cmbOwnerID.getSelectedItem().toString(), txtDate.getText(), 0, 0, 0, 0);
            TreatmentDTO treatment = new TreatmentDTO(txtTreatmentID.getText(), cmbPetID.getSelectedItem().toString(), cmbVetID.getSelectedItem().toString(), txtPaymentID.getText(), txtxDiagnosis.getText(), txtDesc.getText(), Double.parseDouble(txtTreatmentCharge.getText()));

            ArrayList<TreatmentDetailsDTO> tDtailsArray = new ArrayList<>();
            for (int i = 0; i < dtmMedicine.getRowCount(); i++) {
                TreatmentDetailsDTO tDetail = new TreatmentDetailsDTO(txtTreatmentID.getText(), dtmMedicine.getValueAt(i, 0).toString(), Integer.parseInt(dtmMedicine.getValueAt(i, 3).toString()), Double.parseDouble(dtmMedicine.getValueAt(i, 2).toString()), Double.parseDouble(dtmMedicine.getValueAt(i, 4).toString()));
                tDtailsArray.add(tDetail);
            }
            try{
                if(PaymentController.isAdded()){}else{
                    boolean payResult=PaymentController.addPayment(payment);
                    if(!payResult){
                    JOptionPane.showMessageDialog(this, "Payment hasn't been placed well due to some sort of an error");}
                }
                boolean result = TreatmentController.addTreatmet(treatment, tDtailsArray);
                //boolean result=TreatmentDetailsController.addTreatmentDetail(tDetail);
                if (result) {
                    JOptionPane.showMessageDialog(this, "Treatment has been successfully placed.");
                    getTreatmentID();
                    txtxDiagnosis.setText(null);
                    txtDesc.setText(null);
                    txtTreatmentCharge.setText(null);
                    txtMedQty.setText(null);
                } else {
                    JOptionPane.showMessageDialog(this, "Treatment hasn't been placed well due to some sort of an error");
                }
            } catch (Exception ex) {
                Logger.getLogger(AddPetTreatmentPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_jLabel14MouseClicked

    private void txtMedQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMedQtyActionPerformed
        /* double amount = Double.parseDouble(txtMedPrice.getText()) * (Integer) txtMedQty.getValue();
        Object[] rawData = {cmbMedicineID.getSelectedItem().toString(), txtMedDesc.getText(), Double.parseDouble(txtMedPrice.getText()), (Integer) txtMedQty.getValue(), amount};
        dtmMedicine.addRow(rawData);
        //txtMedQty.setValue(0);
        cmbMedicineType.requestFocus();
        double netAmount = 0;
        for (int i = 0; i < tblMedicine.getRowCount(); i++) {
            netAmount += (double) tblMedicine.getValueAt(i, 4);
        }
        txtMedCharge.setText(Double.toString(netAmount));*/
        if(cmbMedicineType.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null,"Select Medicine Type");
            return;
        }
        if(cmbMedicineID.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null,"Select Medicine");
            return;
        }
        addToMedicineTable();
    }//GEN-LAST:event_txtMedQtyActionPerformed

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        MakePayementPanel panl = new MakePayementPanel();
        JPanel middle = HomeFrame.getMiddlePanel();
        middle.removeAll();
        panl.setSize(middle.getSize());
        middle.add(panl);
        middle.revalidate();
        middle.repaint();
    }//GEN-LAST:event_jLabel13MouseClicked

    private void cmbVetIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbVetIDActionPerformed
        txtxDiagnosis.requestFocus();
    }//GEN-LAST:event_cmbVetIDActionPerformed

    private void cmbMedicineTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMedicineTypeActionPerformed
        cmbMedicineID.requestFocus();
    }//GEN-LAST:event_cmbMedicineTypeActionPerformed

    private void cmbMedicineIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMedicineIDActionPerformed
        txtMedQty.requestFocus();
    }//GEN-LAST:event_cmbMedicineIDActionPerformed

    private void txtTreatmentChargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTreatmentChargeActionPerformed
        /*Object[] rawData = {txtTreatmentID.getText(),
            cmbPetID.getSelectedItem(),
            cmbVetID.getSelectedItem(),
            txtxDiagnosis.getText(),
            txtDesc.getText(),
            Double.parseDouble(txtTreatmentCharge.getText())};
        dtmTreatment.addRow(rawData);
        double amount = 0;
        for (int i = 0; i < dtmTreatment.getRowCount(); i++) {
            amount += (double) tblTreatment.getValueAt(i, 5);
        }
        txtTreatmentAmount.setText(Double.toString(amount));
        dtmMedicine.setRowCount(0);
        cmbMedicineType.requestFocus();*/
        if(cmbOwnerID.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null,"Select Owner");
            return;
        }
        if(cmbPetID.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null,"Select pet");
            return;
        }
        addToTreatmentTable();
        cmbMedicineType.requestFocus();
    }//GEN-LAST:event_txtTreatmentChargeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXComboBox cmbMedicineID;
    private org.jdesktop.swingx.JXComboBox cmbMedicineType;
    private static org.jdesktop.swingx.JXComboBox cmbOwnerID;
    private org.jdesktop.swingx.JXComboBox cmbPetID;
    private org.jdesktop.swingx.JXComboBox cmbVetID;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXTable tblMedicine;
    private org.jdesktop.swingx.JXTable tblTreatment;
    private static org.jdesktop.swingx.JXTextField txtDate;
    private javax.swing.JTextField txtDesc;
    private org.jdesktop.swingx.JXTextField txtFirstName;
    private static javax.swing.JTextField txtMedCharge;
    private javax.swing.JTextField txtMedDesc;
    private javax.swing.JTextField txtMedPrice;
    private javax.swing.JTextField txtMedQty;
    private javax.swing.JTextField txtNIC;
    private static javax.swing.JTextField txtPaymentID;
    private javax.swing.JTextField txtQtyOnHand;
    private static javax.swing.JTextField txtTreatmentAmount;
    private org.jdesktop.swingx.JXTextField txtTreatmentCharge;
    private javax.swing.JTextField txtTreatmentID;
    private javax.swing.JTextField txtxDiagnosis;
    // End of variables declaration//GEN-END:variables
    private void loadPetIDs() {
        try {
            ArrayList<PetDTO> allPets = PetController.getPets(cmbOwnerID.getSelectedItem().toString());
            cmbPetID.removeAllItems();
            if (allPets == null) {
                return;
            }

            for (PetDTO pet : allPets) {
                cmbPetID.addItem(pet.getPetID());
            }
        } catch (Exception ex) {
            Logger.getLogger(AddPetTreatmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadAllOwnerIDs() {
        try {
            ArrayList<OwnerDTO> allOwners = OwnerController.getAllOwners();
            cmbOwnerID.removeAllItems();
            if (allOwners == null) {
                return;
            }
            for (OwnerDTO owner : allOwners) {
                cmbOwnerID.addItem(owner.getOID());
            }
        } catch (Exception ex) {
            Logger.getLogger(AddPetTreatmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadAllVetIDs() {

        try {
            ArrayList<VetDTO> allVet = VetController.getAllVets();
            cmbVetID.removeAllItems();
            if (allVet == null) {
                return;
            }
            for (VetDTO vet : allVet) {
                cmbVetID.addItem(vet.getVID());
            }
        } catch (Exception ex) {
            Logger.getLogger(AddPetTreatmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void getPaymentID() {
        String newID;
        try {
            newID = IDGenarator.getNewID("payment", "paymentID", "C");
            txtPaymentID.setText(newID);

        } catch (ClassNotFoundException | SQLException e) {
        }
    }

    private void getTreatmentID() {
        String newID;
        try {
            newID = IDGenarator.getNewID("treatment", "TID", "T");
            txtTreatmentID.setText(newID);
        } catch (SQLException ex) {
            Logger.getLogger(AddPetTreatmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddPetTreatmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadSystemDate() {
        Date d1 = new Date(); //Current System date
        SimpleDateFormat df = new SimpleDateFormat("YYYY-MM-dd");
        String formatDate = df.format(d1);
        txtDate.setText(formatDate);

    }

    private void addToMedicineTable() {
        boolean contain = false;
        int qty = Integer.parseInt(txtMedQty.getText());
        int qtyOnHand = Integer.parseInt(txtQtyOnHand.getText());
        double amount = Double.parseDouble(txtMedPrice.getText()) * Integer.parseInt(txtMedQty.getText());

        if (qtyOnHand >= 1) {
            int newQty = qtyOnHand - qty;
            int qtyInTable;
            double amountInTable;
            if(cmbMedicineID.getSelectedIndex()==-1)return;
            String medicineID = cmbMedicineID.getSelectedItem().toString();
            if (tblMedicine.getRowCount() >= 0) {
                int row = -1;
                contain = false;

                for (int i = 0; i < tblMedicine.getRowCount(); i++) {
                    if (medicineID.equals((String) tblMedicine.getValueAt(i, 0))) {
                        row = i;
                        contain = true;
                        qtyInTable = (int) tblMedicine.getValueAt(i, 3);
                        qty = qty + qtyInTable;
                        amountInTable = (double) tblMedicine.getValueAt(i, 4);
                        amount = amount + amountInTable;
                        dtmMedicine.setValueAt(qty, row, 3);
                        dtmMedicine.setValueAt(amount, row, 4);
                        txtQtyOnHand.setText(Integer.toString(newQty));
                        break;
                    }
                }
            }
            if (!contain) {
                //double amount = Double.parseDouble(txtMedPrice.getText()) * Integer.parseInt(txtMedQty.getText());
                Object[] rawData = {cmbMedicineID.getSelectedItem().toString(), txtMedDesc.getText(), Double.parseDouble(txtMedPrice.getText()), Integer.parseInt(txtMedQty.getText()), amount};
                dtmMedicine.addRow(rawData);
                cmbMedicineType.requestFocus();
                double netAmount = 0;
                for (int i = 0; i < tblMedicine.getRowCount(); i++) {
                    netAmount += (double) tblMedicine.getValueAt(i, 4);
                }
                txtMedCharge.setText(Double.toString(netAmount));
                int newQty2 = qtyOnHand - qty;
                txtQtyOnHand.setText(Integer.toString(newQty2));

            }
        } else {
            JOptionPane.showMessageDialog(null, "Medicines Are Not Available");
        }
    }

    public void addToTreatmentTable() {
        boolean contain = false;
        
        String medicineID = txtTreatmentID.getText();
        if (tblTreatment.getRowCount() >= 0) {
            int row = -1;
            contain = false;
            for (int i = 0; i < tblTreatment.getRowCount(); i++) {
                if (medicineID.equals((String) tblTreatment.getValueAt(i, 0))) {
                    JOptionPane.showMessageDialog(null, "Treatment is Alredy Added");
                    return;
                }
            }
        }
        if (!contain) {
            Object[] rawData = {txtTreatmentID.getText(),
                cmbPetID.getSelectedItem(),
                cmbVetID.getSelectedItem(),
                txtxDiagnosis.getText(),
                txtDesc.getText(),
                Double.parseDouble(txtTreatmentCharge.getText())};
            dtmTreatment.addRow(rawData);
            double amount = 0;
            for (int i = 0; i < dtmTreatment.getRowCount(); i++) {
                amount += (double) tblTreatment.getValueAt(i, 5);
            }
            txtTreatmentAmount.setText(Double.toString(amount));
            dtmMedicine.setRowCount(0);
            cmbMedicineType.requestFocus();
        }
    }

    public static String getPaymentDate() {
        String date = txtDate.getText();
        return date;
    }

    public static String getPaymentID2() {
        String id = txtPaymentID.getText();
        return id;
    }

    public static String getTreatmentCharge() {
        String amount = txtTreatmentAmount.getText();
        return amount;
    }

    public static String getMeidicneCharge() {
        String amount = txtMedCharge.getText();
        return amount;
    }

    public static String getOwnerID() {
        if(cmbOwnerID.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(null,"select OwnerID");
        }
        String OID = cmbOwnerID.getSelectedItem().toString();
        return OID;
    }
}
